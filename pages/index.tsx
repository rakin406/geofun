import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import React, { useEffect, useState } from "react";
import io from "socket.io-client";

const socket = io();

function getDistanceFromLatLonInKm(
  lat1: number,
  lon1: number,
  lat2: number,
  lon2: number
): number {
  var R = 6371; // Radius of the earth in km
  var dLat = deg2rad(lat2 - lat1); // deg2rad below
  var dLon = deg2rad(lon2 - lon1);
  var a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(deg2rad(lat1)) *
      Math.cos(deg2rad(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  var d = R * c; // Distance in km
  return d;
}

function deg2rad(deg: number): number {
  return deg * (Math.PI / 180);
}

// Calculate steps from distance
function calculateSteps(distance: number): number {
  // 1 km -> 1408 steps
  // x km -> 1408 * x
  // steps = 1408x steps
  const averageSteps: number = 1408;
  const steps: number = Math.round(averageSteps * distance);
  return steps;
}

const Home: NextPage = (): JSX.Element => {
  const [isConnected, setIsConnected] = useState(socket.connected);
  const [steps, setSteps] = useState<number[]>([]);

  useEffect(() => {
    socketInitializer();
  });

  const socketInitializer = async () => {
    await fetch("/api/hello"); // connect to API

    socket.on("connect", () => {
      setIsConnected(true);
    });

    socket.on("disconnect", () => {
      setIsConnected(false);
    });

    const success = (pos: {
      coords: { latitude: any; longitude: any };
    }): void => {
      var crd = pos.coords;

      const userLocation = { lat: crd.latitude, long: crd.longitude };
      // console.log(userLocation); // debugging

      // Get other's geolocation
      socket.on("update-locations", (msg): void => {
        // Ensure that the response is not my location
        if (JSON.stringify(msg) !== JSON.stringify(userLocation)) {
          // Find difference in distance
          const distance: number = getDistanceFromLatLonInKm(
            userLocation.lat,
            userLocation.long,
            msg.lat,
            msg.long
          );
          // Find the number of steps
          const amountOfSteps: number = calculateSteps(distance);
          // Update steps
          setSteps([...steps, amountOfSteps]);
        }
      });

      // Send user geolocation to socket
      socket.emit("other-locations", userLocation);
    };

    const error = (err: { code: any; message: any }): void => {
      console.warn(`ERROR(${err.code}): ${err.message}`);
      navigator.geolocation.clearWatch(id);
    };

    // Configure geolocation for high accuracy
    const options = {
      enableHighAccuracy: true,
      timeout: 5000,
      maximumAge: 0
    };

    // Start recording user geolocation
    let id = navigator.geolocation.watchPosition(success, error, options);
  };

  // Contain all the steps as HTML content
  const stepsInHtml = steps.map((value) => (
    <p key={value} className={styles.card}>
      {value} steps
    </p>
  ));

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="viewport" content="initial-scale=1.0, width=device-width" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Next.js!</h1>

        <div className={styles.grid}>{stepsInHtml}</div>
      </main>
    </div>
  );
};

export default Home;
